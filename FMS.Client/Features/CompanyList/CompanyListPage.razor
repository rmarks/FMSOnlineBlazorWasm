@page "/companies"
@inject CompanyRepository Repo
@inject HttpClient Http
@inject NavigationManager NavManager

<MudText Class="my-5 ml-2" Typo="Typo.h5">Firmad</MudText>

<MudTable Items="_companies" Hover="true" Loading="_loading" OnRowClick="ViewCompany" T="CompanyListItemModel">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddCompany" />
        <MudSpacer />
        <MudTextField Class="mt-0" @bind-Value="_searchString" @bind-Value:after="LoadData" Placeholder="Otsi nime järgi..."
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 40%" />
        <col style="width: 30%" />
        <col style="width: 30%" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nimi</MudTh>
        <MudTh>Linn</MudTh>
        <MudTh>Riik</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="cursor-pointer">@context.CompanyName</MudTd>
        <MudTd Class="cursor-pointer">@context.City</MudTd>
        <MudTd Class="cursor-pointer">@context.Country</MudTd>
    </RowTemplate>
    <PagerContent>
        <div class="d-flex justify-center">
            <MudPagination Class="pa-4" Count="_pageCount" @bind-Selected="_page" @bind-Selected:after="LoadData" />
        </div>
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<CompanyListItemModel> _companies = Enumerable.Empty<CompanyListItemModel>();
    private int _page = 1;
    private int _pageSize = 10;
    private int _pageCount;
    private string _searchString = "";
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await LoadData();
        _loading = false;
    }

    #region event handlers
    private void ViewCompany(TableRowClickEventArgs<CompanyListItemModel> args)
    {
        NavManager.NavigateTo($"companies/{args.Item.Id}");
    }

    private void AddCompany()
    {
        NavManager.NavigateTo($"companies/add");
    }
    #endregion

    #region helpers
    private async Task LoadData()
    {
        //await LoadDataFromApi();
        await LoadDataFromRepo();
    }

    private async Task LoadDataFromApi()
    {
        var uriWithQuerystring = NavManager.GetUriWithQueryParameters("api/companylist", new Dictionary<string, object?>
            {
                ["searchstring"] = string.IsNullOrWhiteSpace(_searchString) ? null : _searchString,
                ["page"] = _page,
                ["pageSize"] = _pageSize
            });

        var result = await Http.GetFromJsonAsync<CompanyListModel>(uriWithQuerystring);

        if (result is null) throw new NullReferenceException();

        _companies = result.PagedList;
        _pageCount = result.PageCount;
    }

    private async Task LoadDataFromRepo()
    {
        await Task.Delay(1);

        var listModel = Repo.GetPagedList(_searchString, _page, _pageSize);
        _companies = listModel.PagedList;
        _pageCount = listModel.PageCount;
    }
    #endregion
}
